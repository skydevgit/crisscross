/*
 *   CrissCross
 *   A multi-purpose cross-platform library.
 *
 *   A product of Uplink Laboratories.
 *
 *   (c) 2006-2008 Steven Noonan.
 *   Licensed under the New BSD License.
 *
 */

#ifndef __included_cc_tiger_h
#define __included_cc_tiger_h

#include <crisscross/deprecate.h>

namespace CrissCross
{
    namespace Crypto
    {
        //! A Tiger hash generator.
        /*!
         \warning When compiled as 32-bit code, this hash is particularly slow.
                        When compiled as 64-bit code, this hash type can actually be faster
                        to generate than a SHA-256 hash or even a SHA-512 hash.
         \sa Hash SHA1Hash SHA256Hash SHA512Hash
         */
        class TigerHash
        {
private:
			mutable char *m_hashString;
            cc_uint64_t m_hash[3];
			
			int ProcessBlock ( const void *_data, size_t _length );
			void Finalize();

public:
            //! The default constructor.
                #if TARGET_CPU_BITS < 64
            _CC_DEPRECATE_SLOW ("MODERATE")
                #endif
            TigerHash ();

            //! The default destructor.
            virtual ~TigerHash ();

            //! Runs a Tiger hash on the data provided.
            /*!
             \param _data The data to hash. The buffer does not need to be null
                            terminated.
             \param _length The data length in bytes.
             \return Zero on success, nonzero on failure.
             */
            int Process ( const void *_data, size_t _length );

            //! Resets the internal Tiger context and hash buffer.
            void Reset ();

            //! Converts the internal hash data into an hex string, a human readable format.
            /*!
                    The memory location returned by this function is freed when the class
                    is destructed.
             \warning There's no standardized Tiger hex output format yet. It's highly recommended
                            that hashes generated by this class ONLY be compared with hashes generated by
                            another instance of this class.
             */
            virtual const char *ToString () const;

            //! Equality operator.
            /*!
                    Compares two instances of TigerHash to see if the hashes are equal.
             \param _other The other instance of TigerHash to compare to.
             */
            bool operator== ( const TigerHash &_other ) const;

            //! Inequality operator.
            /*!
                    Compares two instances of TigerHash to see if the hashes are not equal.
             \param _other The other instance of TigerHash to compare to.
             */
            inline bool operator!= ( const TigerHash &_other ) const {
                return !( *this == _other );
            };

        };
    }
}

#endif
